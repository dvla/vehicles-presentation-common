#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
NORMAL=$(tput sgr0)

command -v fswatch >/dev/null 2>&1 || { echo >&2 "${RED}Please install 'fswatch' and try again.${NORMAL}"; echo "OSX Users, please run: brew install fswatch"; exit 1; }

cd ..
ROOT=`pwd`
VEHICLES_ONLINE_ROOT=$ROOT/vehicles-online
VRM_RETENTION_ONLINE_ROOT=$ROOT/vrm-retention-online
VRM_ASSIGN_ONLINE_ROOT=$ROOT/vrm-assign-online
VEHICLES_ACQUIRE_ONLINE_ROOT=$ROOT/vehicles-acquire-online
CHANGE_KEEPER_ONLINE=$ROOT/vehicles-change-keeper-online
PRESENTATION_COMMON_ROOT=$ROOT/vehicles-presentation-common
ASSETS_ROOT=$PRESENTATION_COMMON_ROOT/app/assets
COMMON_TEST_ROOT=$PRESENTATION_COMMON_ROOT/common-test

WEBJAR_DEST=/target/web/web-modules/main/webjars/lib/vehicles-presentation-common
SASS_TO_TOUCH=/app/assets/screen.scss

function check_error {
    if [[ $? -ne 0 ]]; then
        echo "${RED} $1 ${NORMAL} "
    else
        echo "${GREEN}$2 ${NORMAL}"
    fi
}

function copy_assets {
    message=$1
    app_location=$2
    destination=$app_location$WEBJAR_DEST
    app_sass_to_touch=$app_location$SASS_TO_TOUCH

    echo "$message ${NORMAL}"

    if [ -d $destination ]; then
        rm -rf $destination
    fi

    if [ -d $ASSETS_ROOT ]; then
        cp -r $ASSETS_ROOT $destination
        check_error "failed" "$destination"
    else
        echo "${RED} not copying assets as source $ASSETS_ROOT doesn't exist!${NORMAL}"
    fi

    echo "" >> $app_sass_to_touch
   # sleep 2 s
   # TEMP_FILE="$app_sass_to_touch-temp-file"
   # sed '$ d' $app_sass_to_touch > $TEMP_FILE
   # mv $TEMP_FILE $app_sass_to_touch
}

function run_setup {
    CURRENT_TIME=$(date)
    echo "run stup $CURRENT_TIME"
    copy_assets "1. Creating symbolic link for vehicles-online..." $VEHICLES_ONLINE_ROOT
    copy_assets "2. Creating symbolic link for vrm-retention-online..." $VRM_RETENTION_ONLINE_ROOT
    copy_assets "3. Creating symbolic link for vrm-assign-online..." $VRM_ASSIGN_ONLINE_ROOT
    copy_assets "4. Creating symbolic link for vehicles-acquire-online..." $VEHICLES_ACQUIRE_ONLINE_ROOT
    copy_assets "5. Creating symbolic link for vehicles-change-keeper-online..." $CHANGE_KEEPER_ONLINE
    copy_assets "6. Creating symbolic link for common-test..." $COMMON_TEST_ROOT
    echo ""
    echo "Monitoring changes in vehicles-presentation-common to reflect in *-online applications."
    echo "Press ctrl+c to stop..."
}

function on_source_change {
    while read event
    do
        run_setup
    done
}

export -f on_source_change


trap ctrl_c INT

function ctrl_c() {
    echo "clean up on CTRL-C"
    awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' $VRM_ASSIGN_ONLINE_ROOT$SASS_TO_TOUCH > temp.txt
       mv temp.txt $VRM_ASSIGN_ONLINE_ROOT$SASS_TO_TOUCH 
    awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' $VRM_RETENTION_ONLINE_ROOT$SASS_TO_TOUCH > temp.txt
       mv temp.txt $VRM_RETENTION_ONLINE_ROOT$SASS_TO_TOUCH
    awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' $VEHICLES_ONLINE_ROOT$SASS_TO_TOUCH > temp.txt
       mv temp.txt $VEHICLES_ONLINE_ROOT$SASS_TO_TOUCH
    awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' $VRM_ASSIGN_ONLINE_ROOT$SASS_TO_TOUCH > temp.txt
       mv temp.txt $VEHICLES_ACQUIRE_ONLINE_ROOT$SASS_TO_TOUCH
    awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' $CHANGE_KEEPER_ONLINE$SASS_TO_TOUCH > temp.txt
       mv temp.txt $CHANGE_KEEPER_ONLINE$SASS_TO_TOUCH
    awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' $COMMON_TEST_ROOT$SASS_TO_TOUCH > temp.txt
       mv temp.txt $COMMON_TEST_ROOT$SASS_TO_TOUCH

}

run_setup
fswatch -o $ASSETS_ROOT -l 0.5 | on_source_change

